{"ast":null,"code":"var _jsxFileName = \"/Users/samuelsheldon/Documents/testCamera_PWA/my-app/src/Scan.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport Scanner from './Scanner';\nimport { ActionsContext } from \"./context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Scan = () => {\n  _s();\n\n  const [message, setMessage] = useState('');\n  const [serialNumber, setSerialNumber] = useState('');\n  const {\n    actions,\n    setActions\n  } = useContext(ActionsContext);\n  const scan = useCallback(async () => {\n    if ('NDEFReader' in window) {\n      try {\n        const ndef = new window.NDEFReader();\n        await ndef.scan();\n        console.log(\"Scan started successfully.\");\n\n        ndef.onreadingerror = () => {\n          console.log(\"Cannot read data from the NFC tag. Try another one?\");\n        };\n\n        ndef.onreadingerror = event => {\n          console.log(\"NDEF message read.\");\n          onReading(event);\n          setActions({\n            scan: 'scanned',\n            write: null\n          });\n        };\n      } catch (error) {\n        console.log(`Error! Scan failed to start: ${error}.`);\n      }\n\n      ;\n    }\n  }, [setActions]);\n\n  const onReading = _ref => {\n    let {\n      message,\n      serialNumber\n    } = _ref;\n    setSerialNumber(serialNumber);\n\n    for (const record of message.records) {\n      switch (record.recordType) {\n        case \"text\":\n          const textDecoder = new TextDecoder(record.encoding);\n          setMessage(textDecoder.decode(record.data));\n          break;\n\n        case \"url\":\n          break;\n\n        default:\n      }\n    }\n  };\n\n  useEffect(() => {\n    scan();\n  }, [scan]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: actions.scan === 'scanned' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"serialNumber: \", serialNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Message: \", message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Scanner, {\n      status: actions.status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }, this)\n  }, void 0, false);\n};\n\n_s(Scan, \"qbzIkR1OkNQltOJ+YEIrkEiguTs=\");\n\n_c = Scan;\nexport default Scan;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scan\");","map":{"version":3,"sources":["/Users/samuelsheldon/Documents/testCamera_PWA/my-app/src/Scan.js"],"names":["React","useCallback","useContext","useEffect","useState","Scanner","ActionsContext","Scan","message","setMessage","serialNumber","setSerialNumber","actions","setActions","scan","window","ndef","NDEFReader","console","log","onreadingerror","event","onReading","write","error","record","records","recordType","textDecoder","TextDecoder","encoding","decode","data","status"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,UAA7B,EAAyCC,SAAzC,EAAoDC,QAApD,QAAmE,OAAnE;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,cAAT,QAA+B,WAA/B;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAEQ,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAyBX,UAAU,CAACI,cAAD,CAAzC;AAEA,QAAMQ,IAAI,GAAGb,WAAW,CAAC,YAAW;AAChC,QAAI,gBAAgBc,MAApB,EAA4B;AACxB,UAAI;AACA,cAAMC,IAAI,GAAG,IAAID,MAAM,CAACE,UAAX,EAAb;AACA,cAAMD,IAAI,CAACF,IAAL,EAAN;AAEAI,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AACAH,QAAAA,IAAI,CAACI,cAAL,GAAsB,MAAM;AACxBF,UAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ;AACH,SAFD;;AAIAH,QAAAA,IAAI,CAACI,cAAL,GAAsBC,KAAK,IAAI;AAC3BH,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAG,UAAAA,SAAS,CAACD,KAAD,CAAT;AACAR,UAAAA,UAAU,CAAC;AACPC,YAAAA,IAAI,EAAE,SADC;AAEPS,YAAAA,KAAK,EAAE;AAFA,WAAD,CAAV;AAIH,SAPD;AAQH,OAjBD,CAiBE,OAAOC,KAAP,EAAc;AACZN,QAAAA,OAAO,CAACC,GAAR,CAAa,gCAA+BK,KAAM,GAAlD;AACH;;AAAA;AACJ;AACJ,GAvBuB,EAuBrB,CAACX,UAAD,CAvBqB,CAAxB;;AAyBA,QAAMS,SAAS,GAAG,QAA6B;AAAA,QAA5B;AAACd,MAAAA,OAAD;AAAUE,MAAAA;AAAV,KAA4B;AAC3CC,IAAAA,eAAe,CAACD,YAAD,CAAf;;AACA,SAAI,MAAMe,MAAV,IAAoBjB,OAAO,CAACkB,OAA5B,EAAqC;AACjC,cAAQD,MAAM,CAACE,UAAf;AACI,aAAK,MAAL;AACI,gBAAMC,WAAW,GAAG,IAAIC,WAAJ,CAAgBJ,MAAM,CAACK,QAAvB,CAApB;AACArB,UAAAA,UAAU,CAACmB,WAAW,CAACG,MAAZ,CAAmBN,MAAM,CAACO,IAA1B,CAAD,CAAV;AACA;;AACJ,aAAK,KAAL;AACI;;AACJ;AAPJ;AASH;AACJ,GAbD;;AAeA7B,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,IAAI;AACP,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIA,sBACI;AAAA,cACKF,OAAO,CAACE,IAAR,KAAiB,SAAjB,gBACD;AAAA,8BACI;AAAA,qCAAkBJ,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,gCAAaF,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADC,gBAKC,QAAC,OAAD;AAAS,MAAA,MAAM,EAAEI,OAAO,CAACqB;AAAzB;AAAA;AAAA;AAAA;AAAA;AANN,mBADJ;AAWH,CA5DD;;GAAM1B,I;;KAAAA,I;AA+DN,eAAeA,IAAf","sourcesContent":["import React, { useCallback, useContext, useEffect, useState} from 'react';\nimport Scanner from './Scanner'\nimport { ActionsContext } from \"./context\";\n\nconst Scan = () => {\n    const [message, setMessage] = useState('');\n    const [serialNumber, setSerialNumber] = useState('');\n    const { actions, setActions} = useContext(ActionsContext);\n\n    const scan = useCallback(async() => {\n        if ('NDEFReader' in window) {\n            try {\n                const ndef = new window.NDEFReader();\n                await ndef.scan();\n\n                console.log(\"Scan started successfully.\");\n                ndef.onreadingerror = () => {\n                    console.log(\"Cannot read data from the NFC tag. Try another one?\");\n                };\n\n                ndef.onreadingerror = event => {\n                    console.log(\"NDEF message read.\");\n                    onReading(event);\n                    setActions({\n                        scan: 'scanned',\n                        write: null\n                    });\n                };\n            } catch (error) {\n                console.log(`Error! Scan failed to start: ${error}.`);\n            };\n        }\n    }, [setActions]);\n\n    const onReading = ({message, serialNumber}) => {\n        setSerialNumber(serialNumber);\n        for(const record of message.records) {\n            switch (record.recordType) {\n                case \"text\":\n                    const textDecoder = new TextDecoder(record.encoding);\n                    setMessage(textDecoder.decode(record.data));\n                    break;\n                case \"url\":\n                    break;\n                default:\n            }\n        }\n    };\n\n    useEffect(() => {\n        scan();\n    }, [scan]);\n\n    return(\n        <>\n            {actions.scan === 'scanned' ?\n            <div>\n                <p>serialNumber: {serialNumber}</p>\n                <p>Message: {message}</p>\n            </div>\n            : <Scanner status={actions.status}></Scanner>}\n\n        </>\n    )\n}\n\n\nexport default Scan;"]},"metadata":{},"sourceType":"module"}