{"ast":null,"code":"var _jsxFileName = \"/Users/samuelsheldon/Documents/mobiledemo/src/Scan.jsx\";\nimport React, { useEffect } from \"react\";\nimport Scanner from \"./Scanner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Scan extends React.Component {\n  constructor(props) {\n    var _s = $RefreshSig$();\n\n    super(props);\n    this.state = {\n      message: null,\n      serialNumber: null,\n      setSerialNumber: null,\n      setMessage: null\n    };\n    this.context = {\n      actions: null,\n      setActions: null\n    };\n\n    function onReading(_ref) {\n      let {\n        message,\n        serialNumber\n      } = _ref;\n      this.setSerialNumber(serialNumber);\n\n      for (const record of message.records) {\n        switch (record.recordType) {\n          case \"text\":\n            const textDecoder = new TextDecoder(record.encoding);\n            console.log(\"Message\", textDecoder.decode(record.data));\n            this.setMessage(textDecoder.decode(record.data));\n            break;\n\n          case \"url\":\n            break;\n\n          default:\n        }\n      }\n    }\n\n    _s(this.componentDidMount(_s(async function Scan() {\n      _s();\n\n      if ('NDEFReader' in window) {\n        try {\n          const ndef = new window.NDEFReader();\n          await ndef.scan();\n          console.log(\"Scan started successfullly\");\n\n          ndef.onreadingerror = () => {\n            console.log(\"Cannot read data from the NFC tag. Try another one?\");\n          };\n\n          ndef.onReading = event => {\n            console.log(\"NDEF message read.\");\n            onReading(event);\n            this.setActions({\n              scan: 'scanned',\n              write: null\n            });\n          };\n        } catch (error) {\n          console.log(`Error! Scan failed start: ${error}`);\n        }\n      }\n\n      useEffect(() => {\n        Scan();\n      }, [Scan]);\n    }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\")), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n    this.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.actions.scan === 'scanned' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Serial Number: \", this.serialNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, void 0), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Message: \", this.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, void 0)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, void 0) : /*#__PURE__*/_jsxDEV(Scanner, {\n        status: this.actions.scan\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }, void 0)\n    }, void 0, false));\n  }\n\n}\n\nexport default Scan;","map":{"version":3,"names":["React","useEffect","Scanner","Scan","Component","constructor","props","state","message","serialNumber","setSerialNumber","setMessage","context","actions","setActions","onReading","record","records","recordType","textDecoder","TextDecoder","encoding","console","log","decode","data","componentDidMount","window","ndef","NDEFReader","scan","onreadingerror","event","write","error","render"],"sources":["/Users/samuelsheldon/Documents/mobiledemo/src/Scan.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Scanner from \"./Scanner\";\n\n\nclass Scan extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: null,\n            serialNumber: null,\n            setSerialNumber: null,\n            setMessage: null\n          }\n        this.context = {\n            actions: null,\n            setActions: null\n        }\n\n\n          function onReading({message, serialNumber}) {\n              this.setSerialNumber(serialNumber);\n              for (const record of message.records) {\n                  switch (record.recordType) {\n                      case \"text\":\n                          const textDecoder = new TextDecoder(record.encoding);\n                          console.log(\"Message\", textDecoder.decode(record.data));\n                          this.setMessage(textDecoder.decode(record.data));\n                          break;\n                     case \"url\":\n                         break;\n                     default:\n                  }\n              }\n\n          }\n\n          this.componentDidMount(\n          async function Scan() {\n              if ('NDEFReader' in window) {\n                  try {\n                      const ndef = new window.NDEFReader();\n                      await ndef.scan();\n\n                      console.log(\"Scan started successfullly\");\n                      ndef.onreadingerror = () => {\n                          console.log(\"Cannot read data from the NFC tag. Try another one?\");\n                      };\n\n                      ndef.onReading = event => {\n                          console.log(\"NDEF message read.\");\n                          onReading(event);\n                          this.setActions({\n                              scan: 'scanned',\n                              write: null\n                          }); \n                      };\n                  } catch(error) {\n                      console.log(`Error! Scan failed start: ${error}`);\n                  }\n              }\n              useEffect(() => {\n                Scan();\n            }, [Scan]);\n\n        })\nthis.render(\n    \n            <>\n            {this.actions.scan === 'scanned' ?  \n            <div>\n                <p>Serial Number: {this.serialNumber}</p>\n                <p>Message: {this.message}</p>\n            </div>\n            : <Scanner status={this.actions.scan}></Scanner> }\n        </>\n);\n    }\n\n\n\n}\n\nexport default Scan;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;;;AAGA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;EAC/BC,WAAW,CAACC,KAAD,EAAQ;IAAA;;IACf,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAa;MACTC,OAAO,EAAE,IADA;MAETC,YAAY,EAAE,IAFL;MAGTC,eAAe,EAAE,IAHR;MAITC,UAAU,EAAE;IAJH,CAAb;IAMA,KAAKC,OAAL,GAAe;MACXC,OAAO,EAAE,IADE;MAEXC,UAAU,EAAE;IAFD,CAAf;;IAME,SAASC,SAAT,OAA4C;MAAA,IAAzB;QAACP,OAAD;QAAUC;MAAV,CAAyB;MACxC,KAAKC,eAAL,CAAqBD,YAArB;;MACA,KAAK,MAAMO,MAAX,IAAqBR,OAAO,CAACS,OAA7B,EAAsC;QAClC,QAAQD,MAAM,CAACE,UAAf;UACI,KAAK,MAAL;YACI,MAAMC,WAAW,GAAG,IAAIC,WAAJ,CAAgBJ,MAAM,CAACK,QAAvB,CAApB;YACAC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,WAAW,CAACK,MAAZ,CAAmBR,MAAM,CAACS,IAA1B,CAAvB;YACA,KAAKd,UAAL,CAAgBQ,WAAW,CAACK,MAAZ,CAAmBR,MAAM,CAACS,IAA1B,CAAhB;YACA;;UACL,KAAK,KAAL;YACI;;UACJ;QARH;MAUH;IAEJ;;IAED,QAAKC,iBAAL,IACA,eAAevB,IAAf,GAAsB;MAAA;;MAClB,IAAI,gBAAgBwB,MAApB,EAA4B;QACxB,IAAI;UACA,MAAMC,IAAI,GAAG,IAAID,MAAM,CAACE,UAAX,EAAb;UACA,MAAMD,IAAI,CAACE,IAAL,EAAN;UAEAR,OAAO,CAACC,GAAR,CAAY,4BAAZ;;UACAK,IAAI,CAACG,cAAL,GAAsB,MAAM;YACxBT,OAAO,CAACC,GAAR,CAAY,qDAAZ;UACH,CAFD;;UAIAK,IAAI,CAACb,SAAL,GAAiBiB,KAAK,IAAI;YACtBV,OAAO,CAACC,GAAR,CAAY,oBAAZ;YACAR,SAAS,CAACiB,KAAD,CAAT;YACA,KAAKlB,UAAL,CAAgB;cACZgB,IAAI,EAAE,SADM;cAEZG,KAAK,EAAE;YAFK,CAAhB;UAIH,CAPD;QAQH,CAjBD,CAiBE,OAAMC,KAAN,EAAa;UACXZ,OAAO,CAACC,GAAR,CAAa,6BAA4BW,KAAM,EAA/C;QACH;MACJ;;MACDjC,SAAS,CAAC,MAAM;QACdE,IAAI;MACP,CAFU,EAER,CAACA,IAAD,CAFQ,CAAT;IAIL,CA5BC;;IA6BV,KAAKgC,MAAL,eAEY;MAAA,UACC,KAAKtB,OAAL,CAAaiB,IAAb,KAAsB,SAAtB,gBACD;QAAA,wBACI;UAAA,8BAAmB,KAAKrB,YAAxB;QAAA;UAAA;UAAA;UAAA;QAAA,UADJ,eAEI;UAAA,wBAAa,KAAKD,OAAlB;QAAA;UAAA;UAAA;UAAA;QAAA,UAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,UADC,gBAKC,QAAC,OAAD;QAAS,MAAM,EAAE,KAAKK,OAAL,CAAaiB;MAA9B;QAAA;QAAA;QAAA;MAAA;IANF,iBAFZ;EAWK;;AAxE8B;;AA8EnC,eAAe3B,IAAf"},"metadata":{},"sourceType":"module"}